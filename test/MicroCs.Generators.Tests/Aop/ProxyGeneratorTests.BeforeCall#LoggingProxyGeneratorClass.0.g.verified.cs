//HintName: LoggingProxyGeneratorClass.0.g.cs
// <auto-generated />
#nullable enable
namespace MicroCs.Generators.Samples.BeforeCall;
partial class LoggingProxyGeneratorClass
{
    private const string ProxyType_Name = nameof(LoggingProxyGeneratorClass);
    private static readonly System.Type ProxyType_Cache;
    public LoggingProxyGeneratorClass(global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface iProxyGeneratorInterface, global::MicroCs.Generators.Lib.Samples.BeforeCall.LoggingInterceptors interceptors)
    {
        this.iProxyGeneratorInterface = iProxyGeneratorInterface;
        this.interceptors = interceptors;
    }

    static LoggingProxyGeneratorClass()
    {
        ProxyType_Cache = typeof(LoggingProxyGeneratorClass);
        IProxyGeneratorInterface_TargetType_Cache = typeof(global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface);
        MyMethod_0_Cache = IProxyGeneratorInterface_TargetType_Cache!.GetMethod(name: MyMethod_0_Name, bindingAttr: System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, binder: null, genericParameterCount: 0, callConvention: System.Reflection.CallingConventions.Any, types: System.Array.Empty<System.Type>(), modifiers: null)!;
        MyMethod_1_Cache = IProxyGeneratorInterface_TargetType_Cache!.GetMethod(name: MyMethod_1_Name, bindingAttr: System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, binder: null, genericParameterCount: 0, callConvention: System.Reflection.CallingConventions.Any, types: new System.Type[] { typeof(string), typeof(int) }, modifiers: null)!;
        MyMethod_2_Cache = IProxyGeneratorInterface_TargetType_Cache!.GetMethod(name: MyMethod_2_Name, bindingAttr: System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, binder: null, genericParameterCount: 0, callConvention: System.Reflection.CallingConventions.Any, types: new System.Type[] { typeof(string), typeof(System.DateTime) }, modifiers: null)!;
        MyMethod_3_Cache = IProxyGeneratorInterface_TargetType_Cache!.GetMethod(name: MyMethod_3_Name, bindingAttr: System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, binder: null, genericParameterCount: 0, callConvention: System.Reflection.CallingConventions.Any, types: new System.Type[] { typeof(int), typeof(System.Threading.CancellationToken) }, modifiers: null)!;
        MyMethod_4_Cache = IProxyGeneratorInterface_TargetType_Cache!.GetMethod(name: MyMethod_4_Name, bindingAttr: System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, binder: null, genericParameterCount: 0, callConvention: System.Reflection.CallingConventions.Any, types: new System.Type[] { typeof(int), typeof(string), typeof(System.Threading.CancellationToken) }, modifiers: null)!;
    }

    private readonly global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface iProxyGeneratorInterface;
    private const string IProxyGeneratorInterface_TargetType_Name = nameof(global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface);
    private static readonly System.Type IProxyGeneratorInterface_TargetType_Cache;
    private const string MyMethod_0_Name = nameof(global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface.MyMethod);
    private static readonly System.Reflection.MethodInfo MyMethod_0_Cache;
    void global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface.MyMethod()
    {
        // var state = interceptor.BeforeCall(...);
        var state = interceptors.BeforeCall(
        );

        try
        {
            iProxyGeneratorInterface.MyMethod();

            // interceptor.AfterSuccessCall(state, result?, ...);

        }
        catch (Exception exception)
        {
            // interceptor.AfterFailedCall(state, exception...);

            throw;
        }
        finally
        {
            // interceptor.AfterCall(state, ...);
        }
    }

    #endregion [ MyMethod ]

    #region [ MyMethod ]

    private const string MyMethod_1_Name = nameof(global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface.MyMethod);
    private static readonly System.Reflection.MethodInfo MyMethod_1_Cache;
    string global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface.MyMethod(string input1, int input2)
    {
        // var state = interceptor.BeforeCall(...);
        var state = interceptors.BeforeCall(
        );

        try
        {
            var result = iproxygeneratorinterface.MyMethod();

            // interceptor.AfterSuccessCall(state, result?, ...);

            return result;
        }
        catch (Exception exception)
        {
            // interceptor.AfterFailedCall(state, exception...);

            throw;
        }
        finally
        {
            // interceptor.AfterCall(state, ...);
        }
    }

    #endregion [ MyMethod ]

    #region [ MyMethod ]
    private const string MyMethod_2_Name = nameof(global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface.MyMethod);
    private static readonly System.Reflection.MethodInfo MyMethod_2_Cache;
    (string, System.DateTime) global::MicroCs.Generators.Lib.Samples.BeforeCall.IProxyGeneratorInterface.MyMethod(string input1, System.DateTime input2)
    {
        // var state = interceptor.BeforeCall(...);
        var state = interceptors.BeforeCall(
        );

        try
        {
            var result = iproxygeneratorinterface.MyMethod();

            // interceptor.AfterSuccessCall(state, result?, ...);

            return result;
        }
        catch (Exception exception)
        {
            // interceptor.AfterFailedCall(state, exception...);

            throw;
        }
        finally
        {
            // interceptor.AfterCall(state, ...);
        }
    }

    #endregion [ MyMethod ]

    #endregion [ IProxyGeneratorInterface ]
}
